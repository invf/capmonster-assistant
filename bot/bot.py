import os
import aiohttp
import asyncio
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
BACKEND_URL = os.getenv("BACKEND_URL", "http://127.0.0.1:8000")
CAPMONSTER_KEY = os.getenv("CAPMONSTER_API_KEY")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(Command("start"))
async def start(msg: types.Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="üß© Samples", callback_data="samples")
    kb.button(text="üí∞ Balance", callback_data="balance")
    await msg.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Ñ–æ—Ç–æ –∫–∞–ø—á—ñ, —ñ —è —Ä–æ–∑–ø—ñ–∑–Ω–∞—é —ó—ó —á–µ—Ä–µ–∑ CapMonsterCloud.\n"
        "–ê–±–æ –≤–∏–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ üëá",
        reply_markup=kb.as_markup()
    )

# --- Callback –∫–Ω–æ–ø–∫–∏ ---
@dp.callback_query()
async def callbacks(call: types.CallbackQuery):
    if call.data == "balance":
        r = requests.post("https://api.capmonster.cloud/getBalance", json={"clientKey": CAPMONSTER_KEY})
        data = r.json()
        if data.get("errorId") == 0:
            await call.message.answer(f"üí∞ –ë–∞–ª–∞–Ω—Å CapMonsterCloud: {data['balance']} USD")
        else:
            await call.message.answer(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {data}")
    elif call.data == "samples":
        kb = InlineKeyboardBuilder()
        kb.button(text="üì∑ Image sample", callback_data="sample_image")
        kb.button(text="üåê reCAPTCHA demo", url="https://www.google.com/recaptcha/api2/demo")
        kb.button(text="üåê hCaptcha demo", url="https://accounts.hcaptcha.com/demo")
        kb.button(text="üåê GeeTest demo", url="https://demos.geetest.com/sensebot")
        await call.message.answer("üîó –û—Å—å —Ç–µ—Å—Ç–æ–≤—ñ –∫–∞–ø—á—ñ:", reply_markup=kb.as_markup())
    elif call.data == "sample_image":
        await call.message.answer_photo(
            "https://raw.githubusercontent.com/openai/openai-cookbook/main/examples/data/captcha_sample.png",
            caption="üì∏ –ù–∞–¥—ñ—à–ª–∏ –ø–æ–¥—ñ–±–Ω—É –∫–∞–ø—á—É ‚Äî —è —Å–ø—Ä–æ–±—É—é —ó—ó —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏!"
        )

# --- –û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –∑–æ–±—Ä–∞–∂–µ–Ω—å ---
@dp.message()
async def solve_captcha(msg: types.Message):
    if not msg.photo:
        return await msg.answer("üì∏ –ù–∞–¥—ñ—à–ª–∏ —Å–∞–º–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞–ø—á—ñ.")
    
    file_id = msg.photo[-1].file_id
    file = await bot.get_file(file_id)
    photo = await bot.download_file(file.file_path)

    form = aiohttp.FormData()
    form.add_field("file", photo, filename="captcha.jpg")

    progress_msg = await msg.answer("üåÄ –†–æ–∑–ø–æ—á–∏–Ω–∞—é —Ä–æ–∑–≥–∞–¥—É–≤–∞–Ω–Ω—è... 0%")
    progress = 0

    try:
        async with aiohttp.ClientSession() as session:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç –¥–æ –±–µ–∫–µ–Ω–¥—É /solve_progress
            async with session.post(f"{BACKEND_URL}/solve_progress", data=form) as resp:
                # –Ü–º—ñ—Ç—É—î–º–æ –ø—Ä–æ—Ü–µ—Å ‚Äî –ø–æ—Å—Ç—É–ø–æ–≤–æ –æ–Ω–æ–≤–ª—é—î–º–æ % –ø—ñ–¥ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
                for i in range(1, 6):
                    progress += 20
                    await progress_msg.edit_text(f"ü§î –†–æ–∑–≥–∞–¥—É—é... {progress}%")
                    await asyncio.sleep(1)
                
                data = await resp.json()

                if data.get("status") == "ready":
                    text = data["solution"]["text"]
                    await progress_msg.edit_text(f"‚úÖ –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ: `{text}`", parse_mode="Markdown")
                elif data.get("status") == "timeout":
                    await progress_msg.edit_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ (timeout).")
                else:
                    await progress_msg.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {data}")
    except Exception as e:
        await progress_msg.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    print("ü§ñ Bot started and waiting for captchas...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
